package actions

import (
	"fmt"
	"net/http"

	"github.com/gobuffalo/buffalo"
	"github.com/gobuffalo/pop/v6"
	"github.com/gobuffalo/x/responder"

	"projectcollection/models"
)

// This file is generated by Buffalo. It offers a basic structure for
// adding, editing and deleting a page. If your model is more
// complex or you need more than the basic implementation you need to
// edit this file.

// Following naming logic is implemented in Buffalo:
// Model: Singular (Alias)
// DB Table: Plural (aliases)
// Resource: Plural (Aliases)
// Path: Plural (/aliases)
// View Template Folder: Plural (/templates/aliases/)

// AliasesResource is the resource for the Alias model
type AliasesResource struct {
	buffalo.Resource
}

// List gets all Aliases. This function is mapped to the path
// GET /aliases
func (v AliasesResource) List(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return fmt.Errorf("no transaction found")
	}
	// check the permissions of the user. If it hasn't got permission for the "alias.view" resource, return an error
	if !c.Value("current_user").(*models.User).HasPermissionFor("alias.view") {
		return c.Error(http.StatusUnauthorized, fmt.Errorf("You don't have permission to view aliases"))
	}

	aliases := &models.Aliases{}

	// Paginate results. Params "page" and "per_page" control pagination.
	// Default values are "page=1" and "per_page=20".
	q := tx.PaginateFromParams(c.Params())

	// Retrieve all Aliases from the DB
	if err := q.All(aliases); err != nil {
		return err
	}

	return responder.Wants("html", func(c buffalo.Context) error {
		// Add the paginator to the context so it can be used in the template.
		c.Set("pagination", q.Paginator)

		c.Set("aliases", aliases)
		return c.Render(http.StatusOK, r.HTML("aliases/index.plush.html"))
	}).Wants("json", func(c buffalo.Context) error {
		return c.Render(200, r.JSON(aliases))
	}).Wants("xml", func(c buffalo.Context) error {
		return c.Render(200, r.XML(aliases))
	}).Respond(c)
}

// Show gets the data for one Alias. This function is mapped to
// the path GET /aliases/{alias_id}
func (v AliasesResource) Show(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return fmt.Errorf("no transaction found")
	}
	// check the permissions of the user. If it hasn't got permission for the "alias.view" resource, return an error
	if !c.Value("current_user").(*models.User).HasPermissionFor("alias.view") {
		return c.Error(http.StatusUnauthorized, fmt.Errorf("You don't have permission to view aliases"))
	}

	// Allocate an empty Alias
	alias := &models.Alias{}

	// To find the Alias the parameter alias_id is used.
	if err := tx.Find(alias, c.Param("alias_id")); err != nil {
		return c.Error(http.StatusNotFound, err)
	}

	return responder.Wants("html", func(c buffalo.Context) error {
		c.Set("alias", alias)

		return c.Render(http.StatusOK, r.HTML("aliases/show.plush.html"))
	}).Wants("json", func(c buffalo.Context) error {
		return c.Render(200, r.JSON(alias))
	}).Wants("xml", func(c buffalo.Context) error {
		return c.Render(200, r.XML(alias))
	}).Respond(c)
}

// New renders the form for creating a new Alias.
// This function is mapped to the path GET /aliases/new
func (v AliasesResource) New(c buffalo.Context) error {
	// check the permissions of the user. If it hasn't got permission for the "alias.create" resource, return an error
	if !c.Value("current_user").(*models.User).HasPermissionFor("alias.create") {
		return c.Error(http.StatusUnauthorized, fmt.Errorf("You don't have permission to create aliases"))
	}
	c.Set("alias", &models.Alias{})

	return c.Render(http.StatusOK, r.HTML("aliases/new.plush.html"))
}

// Create adds a Alias to the DB. This function is mapped to the
// path POST /aliases
func (v AliasesResource) Create(c buffalo.Context) error {
	// Allocate an empty Alias
	alias := &models.Alias{}

	// Bind alias to the html form elements
	if err := c.Bind(alias); err != nil {
		return err
	}
	// check the permissions of the user. If it hasn't got permission for the "alias.create" resource, return an error
	if !c.Value("current_user").(*models.User).HasPermissionFor("alias.create") {
		return c.Error(http.StatusUnauthorized, fmt.Errorf("You don't have permission to create aliases"))
	}

	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return fmt.Errorf("no transaction found")
	}

	// Validate the data from the html form
	verrs, err := tx.ValidateAndCreate(alias)
	if err != nil {
		return err
	}

	if verrs.HasAny() {
		return responder.Wants("html", func(c buffalo.Context) error {
			// Make the errors available inside the html template
			c.Set("errors", verrs)

			// Render again the new.html template that the user can
			// correct the input.
			c.Set("alias", alias)

			return c.Render(http.StatusUnprocessableEntity, r.HTML("aliases/new.plush.html"))
		}).Wants("json", func(c buffalo.Context) error {
			return c.Render(http.StatusUnprocessableEntity, r.JSON(verrs))
		}).Wants("xml", func(c buffalo.Context) error {
			return c.Render(http.StatusUnprocessableEntity, r.XML(verrs))
		}).Respond(c)
	}

	return responder.Wants("html", func(c buffalo.Context) error {
		// If there are no errors set a success message
		c.Flash().Add("success", T.Translate(c, "alias.created.success"))

		// and redirect to the show page
		return c.Redirect(http.StatusSeeOther, "/aliases/%v", alias.ID)
	}).Wants("json", func(c buffalo.Context) error {
		return c.Render(http.StatusCreated, r.JSON(alias))
	}).Wants("xml", func(c buffalo.Context) error {
		return c.Render(http.StatusCreated, r.XML(alias))
	}).Respond(c)
}

// Edit renders a edit form for a Alias. This function is
// mapped to the path GET /aliases/{alias_id}/edit
func (v AliasesResource) Edit(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return fmt.Errorf("no transaction found")
	}
	// check the permissions of the user. If it hasn't got permission for the "alias.edit" resource, return an error
	if !c.Value("current_user").(*models.User).HasPermissionFor("alias.edit") {
		return c.Error(http.StatusUnauthorized, fmt.Errorf("You don't have permission to edit aliases"))
	}

	// Allocate an empty Alias
	alias := &models.Alias{}

	if err := tx.Find(alias, c.Param("alias_id")); err != nil {
		return c.Error(http.StatusNotFound, err)
	}

	c.Set("alias", alias)
	return c.Render(http.StatusOK, r.HTML("aliases/edit.plush.html"))
}

// Update changes a Alias in the DB. This function is mapped to
// the path PUT /aliases/{alias_id}
func (v AliasesResource) Update(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return fmt.Errorf("no transaction found")
	}
	// check the permissions of the user. If it hasn't got permission for the "alias.edit" resource, return an error
	if !c.Value("current_user").(*models.User).HasPermissionFor("alias.edit") {
		return c.Error(http.StatusUnauthorized, fmt.Errorf("You don't have permission to edit aliases"))
	}

	// Allocate an empty Alias
	alias := &models.Alias{}

	if err := tx.Find(alias, c.Param("alias_id")); err != nil {
		return c.Error(http.StatusNotFound, err)
	}

	// Bind Alias to the html form elements
	if err := c.Bind(alias); err != nil {
		return err
	}

	verrs, err := tx.ValidateAndUpdate(alias)
	if err != nil {
		return err
	}

	if verrs.HasAny() {
		return responder.Wants("html", func(c buffalo.Context) error {
			// Make the errors available inside the html template
			c.Set("errors", verrs)

			// Render again the edit.html template that the user can
			// correct the input.
			c.Set("alias", alias)

			return c.Render(http.StatusUnprocessableEntity, r.HTML("aliases/edit.plush.html"))
		}).Wants("json", func(c buffalo.Context) error {
			return c.Render(http.StatusUnprocessableEntity, r.JSON(verrs))
		}).Wants("xml", func(c buffalo.Context) error {
			return c.Render(http.StatusUnprocessableEntity, r.XML(verrs))
		}).Respond(c)
	}

	return responder.Wants("html", func(c buffalo.Context) error {
		// If there are no errors set a success message
		c.Flash().Add("success", T.Translate(c, "alias.updated.success"))

		// and redirect to the show page
		return c.Redirect(http.StatusSeeOther, "/aliases/%v", alias.ID)
	}).Wants("json", func(c buffalo.Context) error {
		return c.Render(http.StatusOK, r.JSON(alias))
	}).Wants("xml", func(c buffalo.Context) error {
		return c.Render(http.StatusOK, r.XML(alias))
	}).Respond(c)
}

// Destroy deletes a Alias from the DB. This function is mapped
// to the path DELETE /aliases/{alias_id}
func (v AliasesResource) Destroy(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return fmt.Errorf("no transaction found")
	}
	// check the permissions of the user. If it hasn't got permission for the "alias.delete" resource, return an error
	if !c.Value("current_user").(*models.User).HasPermissionFor("alias.delete") {
		return c.Error(http.StatusUnauthorized, fmt.Errorf("You don't have permission to delete aliases"))
	}

	// Allocate an empty Alias
	alias := &models.Alias{}

	// To find the Alias the parameter alias_id is used.
	if err := tx.Find(alias, c.Param("alias_id")); err != nil {
		return c.Error(http.StatusNotFound, err)
	}

	if err := tx.Destroy(alias); err != nil {
		return err
	}

	return responder.Wants("html", func(c buffalo.Context) error {
		// If there are no errors set a flash message
		c.Flash().Add("success", T.Translate(c, "alias.destroyed.success"))

		// Redirect to the index page
		return c.Redirect(http.StatusSeeOther, "/aliases")
	}).Wants("json", func(c buffalo.Context) error {
		return c.Render(http.StatusOK, r.JSON(alias))
	}).Wants("xml", func(c buffalo.Context) error {
		return c.Render(http.StatusOK, r.XML(alias))
	}).Respond(c)
}
